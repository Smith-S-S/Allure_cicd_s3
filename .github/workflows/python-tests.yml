name: Run Pytest with Allure on Self-Hosted Runner

on:
  # workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


permissions:
  contents: write
  id-token: write
  pages: write

jobs:
  build:  # âœ… Now matches 'needs: build'
    name: Run Tests on Self-Hosted Runner
    runs-on: [self-hosted, s3-runner]  # Use your labeled self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Allure CLI
        shell: powershell
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

          if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
            irm get.scoop.sh | iex
            $scoopPath = "$env:USERPROFILE\scoop\shims"
            $env:PATH += ";$scoopPath"
          }

          "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          scoop bucket add java | Out-Null
          scoop install allure | Out-Null

          allure --version
          java -version


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest with Allure
        run: |
          pytest test_always_pass.py test_always_fail.py test_calculator_app.py --alluredir=allure-results

 # Generate Allure Report (static HTML)
      - name: Generate Allure Report
        if: always()
        shell: powershell
        run: |
          if (Test-Path "allure-results") {
            allure generate --clean "allure-results" -o "allure-report"
          } else {
            Write-Host "No allure-results directory found; skipping generation."
          }

      # Optional: Upload test logs (if you have logs)
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            AugmentusTests/Logs/**/*.log
            AugmentusTests/Logs/**/*.json

      # Upload Allure report for deployment
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

  # deploy job using self-hosted runner
  deploy:
    name: Deploy Allure Report to GitHub Pages
    runs-on: [self-hosted, s3-runner]
    needs: build
    if: always()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report
          shell: 'C:\Program Files\Git\bin\bash.exe'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # deploy job using ubuntu-latest runner

  # deploy:
  #   name: Deploy Allure Report to GitHub Pages
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: always()  # Deploy even if tests failed
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}

  #   steps:
  #     - name: Download Allure Report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: allure-report
  #         path: ./allure-report

  #     - name: Configure GitHub Pages
  #       uses: actions/configure-pages@v5

  #     - name: Upload Pages Artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ./allure-report

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4